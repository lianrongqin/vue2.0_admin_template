{
  // Place your 全局 snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "!TjForm": {
    "scope": "javascript,typescript,vue,vue-html,html,xml",
    "prefix": "!TjForm",
    "body": [
      "<TjForm",
      "  :canBeHidden=\"false\"",
      "  :formItems=\"formItems\"",
      "  :formItemProps=\"formItemProps\"",
      "  :formProps=\"formProps\"",
      "  :initValues=\"formInitValues\"",
      "  :onlySubmitByClickButton=\"true\"",
      "  :operate=\"true\"",
      "  :props=\"formLayoutProps\"",
      "  :rules=\"formRules\"",
      "  :slotPrefixRender=\"formPrefixRender\"",
      "  :slotSuffixRender=\"formSuffixRender\"",
      "  @reset=\"onReset\"",
      "  @submit=\"onSearch\"",
      "  type=\"normal\"",
      "/>"
    ],
    "description": "TjForm component"
  },
  "!TjForm simple": {
    "scope": "javascript,typescript,vue,vue-html,html,xml",
    "prefix": "!TjForm simple",
    "body": [
      "<TjForm",
      "  :canBeHidden=\"false\"",
      "  :formItems=\"formItems\"",
      "  :initValues=\"formInitValues\"",
      "  :onlySubmitByClickButton=\"true\"",
      "  :operate=\"true\"",
      "  @reset=\"onReset\"",
      "  @submit=\"onSearch\"",
      "  type=\"normal\"",
      "/>"
    ],
    "description": "TjForm component"
  },
  "!TjForm props": {
    "scope": "javascript,typescript,vue,vue-html,html,xml",
    "prefix": "!TjForm props",
    "body": [
      "formInitValues = {};",
      "formItems = [",
      "  {",
      "    label: '名称',",
      "    prop: 'name',",
      "    fieldType: 'Input',",
      "    options: [],",
      "    canBeHidden: false,",
      "    props: {},",
      "    colProps: { },",
      "    fieldProps: {",
      "      placeholder: '请输入名称'",
      "    },",
      "    render(h, form, values, submitCallback) {",
      "      return h('elInput', { attrs: { placeholder: '请输入...' } })",
      "    }",
      "  }",
      "]",
      "formItemProps = {}",
      "formProps = {}",
      "formLayoutProps = {}",
      "formRules = {}",
      "formPrefixRender(h) {}",
      "formSuffixRender(h) {}",
      "onSearch(form, values, submitCallback, isSubmitByFieldChange) {}",
      "onReset() {}"
    ],
    "description": "TjForm props simple"
  },
  "!TjForm props simple": {
    "scope": "javascript,typescript,vue,vue-html,html,xml",
    "prefix": "!TjForm props simple",
    "body": [
      "formInitValues = {};",
      "formItems = [",
      "  {",
      "    label: '名称',",
      "    prop: 'name',",
      "    fieldType: 'Input',",
      "    options: [],",
      "    canBeHidden: false,",
      "    props: {},",
      "    colProps: { },",
      "    fieldProps: {",
      "      placeholder: '请输入名称'",
      "    },",
      "    render(h, form, values, submitCallback) {",
      "      return h('elInput', { attrs: { placeholder: '请输入...' } })",
      "    }",
      "  }",
      "]",
      "onSearch(form, values, submitCallback, isSubmitByFieldChange) {}",
      "onReset() {}"
    ],
    "description": "TjForm props simple"
  },
  "!TjTable": {
    "scope": "javascript,typescript,vue,vue-html,html,xml",
    "prefix": "!TjTable",
    "body": [
      "<TjTable",
      "  :columns=\"columns\"",
      "  :dataSource=\"dataSource\"",
      "  :pagination=\"pagination\"",
      "  :paginationEvents=\"paginationEvents\"",
      "  :slotBeforePaginationRender=\"beforePaginationRender\"",
      "  :slotBeforeTableRender=\"beforeTableRender\"",
      "  :slotBeforeToolsRender=\"beforeToolsRender\"",
      "  :slotPrefixRender=\"tablePrefixRender\"",
      "  :slotSuffixRender=\"tableSuffixRender\"",
      "  :tableEvents=\"tableEvents\"",
      "  :tableProps=\"tableProps\"",
      "  :tools=\"tools\"",
      "  :toolsSuffixRender=\"toolsSuffixRender\"",
      "  :toolsTitle=\"toolsTilte\"",
      "  @clickMenu=\"onClickToolsMenu\"",
      "  @refresh=\"onRefresh\"",
      "/>"
    ],
    "description": "TjTable"
  },
  "!TjTable simple": {
    "scope": "javascript,typescript,vue,vue-html,html,xml",
    "prefix": "!TjTable simple",
    "body": [
      "<TjTable",
      "  :columns=\"columns\"",
      "  :dataSource=\"dataSource\"",
      "  :pagination=\"pagination\"",
      "  :paginationEvents=\"paginationEvents\"",
      "  :tableEvents=\"tableEvents\"",
      "  :tools=\"tools\"",
      "  @clickMenu=\"onClickToolsMenu\"",
      "  @refresh=\"onRefresh\"",
      "/>"
    ],
    "description": "TjTable simple"
  },
  "!TjTable props": {
    "scope": "javascript,typescript,vue,vue-html,html,xml",
    "prefix": "!TjTable props",
    "body": [
      "dataSource = [];",
      "columns = [];",
      "toolsTilte = '';",
      "tools = {",
      "  refresh: true,",
      "  columnsConfig: true,",
      "  menusTiledNumber: 2,",
      "  menus: [",
      "    {",
      "      label: '新增',",
      "      icon: 'el-icon-plus',",
      "      disabled: false,",
      "      clickHandler: (e, item, i) => {}",
      "    }",
      "  ],",
      "  dropdownMenu: {",
      "    title: '操作',",
      "    props: {}",
      "  }",
      "};",
      "tableProps = {",
      "  border: true",
      "};",
      "tableEvents = {",
      "  select(selection, row) {},",
      "  'select-all'(selection) {},",
      "  'selection-change'(selection) {}",
      "};",
      "paginationEvents = {",
      "  currentChange: this.onCurrentChange",
      "};",
      "get pagination() {",
      "  return {",
      "    total: this.total,",
      "    currentPage: this.currentPage",
      "  }",
      "}",
      "beforePaginationRender(h) {",
      "  return h('div');",
      "}",
      "beforeTableRender(h) {",
      "  return h('div');",
      "}",
      "beforeToolsRender(h) {",
      "  return h('div');",
      "}",
      "tablePrefixRender(h) {",
      "  return h('div');",
      "}",
      "tableSuffixRender(h) {",
      "  return h('div');",
      "}",
      "toolsSuffixRender(h) {",
      "  return h('div');",
      "}",
      "onCurrentChange(p) {",
      "  this.getList()",
      "}",
      "onClickToolsMenu(item, i) {}",
      "onRefresh() {}",
      "getList() {}"
    ],
    "description": "TjTable props"
  },
  "!TjTable props simple": {
    "scope": "javascript,typescript,vue,vue-html,html,xml",
    "prefix": "!TjTable props simple",
    "body": [
      "dataSource = [];",
      "columns = [];",
      "tools = {",
      "  refresh: true,",
      "  columnsConfig: true,",
      "  menus: [",
      "    {",
      "      label: '新增',",
      "      icon: 'el-icon-plus',",
      "      disabled: false,",
      "      clickHandler: (e, item, i) => {}",
      "    }",
      "  ]",
      "};",
      "tableProps = {",
      "  border: true",
      "};",
      "tableEvents = {",
      "  select(selection, row) {},",
      "  'select-all'(selection) {},",
      "  'selection-change'(selection) {}",
      "};",
      "paginationEvents = {",
      "  currentChange: this.onCurrentChange",
      "};",
      "get pagination() {",
      "  return {",
      "    total: this.total,",
      "    currentPage: this.currentPage",
      "  }",
      "}",
      "onCurrentChange(p) {",
      "  this.getList()",
      "}",
      "onClickToolsMenu(item, i) {}",
      "onRefresh() {}",
      "getList() {}"
    ],
    "description": "TjTable props simple"
  },
  "!TjTablepage": {
    "scope": "javascript,typescript,vue,vue-html,html,xml",
    "prefix": "!TjTablepage",
    "body": [
      "<template>",
      "  <div class=\"ins-tablePageNewPage\">",
      "    <TjTablePage",
      "      :columns=\"columns\"",
      "      :getList=\"getList\"",
      "      :searchForm=\"searchForm\"",
      "      :searchFormFormItems=\"searchFormFormItems\"",
      "      :searchFormInitValues=\"searchFormInitValues\"",
      "      :searchFormRules=\"searchFormRules\"",
      "      :slotAfterSearchRender=\"slotAfterSearchRender\"",
      "      :slotBeforePaginationRender=\"slotBeforePaginationRender\"",
      "      :slotBeforeSearchRender=\"slotBeforeSearchRender\"",
      "      :slotBeforeTableRender=\"slotBeforeTableRender\"",
      "      :slotBeforeToolsRender=\"slotBeforeToolsRender\"",
      "      :slotTablePrefixRender=\"slotTablePrefixRender\"",
      "      :slotTableSuffixRender=\"slotTableSuffixRender\"",
      "      :slotPrefixRender=\"slotPrefixRender\"",
      "      :slotSuffixRender=\"slotSuffixRender\"",
      "      :tableProps=\"tableProps\"",
      "      :tools=\"tools\"",
      "      :toolsPreixRender=\"toolsPreixRender\"",
      "      :toolsSuffixRender=\"toolsSuffixRender\"",
      "      :toolsTitle=\"toolsTitle\"",
      "      @clickMenu=\"onClickToolsMenu\"",
      "      pagination",
      "    />",
      "  </div>",
      "</template>",
      "",
      "<script lang=\"ts\">",
      "import { Component, Vue, Prop, Emit, Mixins, Watch, Inject, Provide, Ref } from 'vue-property-decorator';",
      "",
      "@Component({",
      "  name: ''",
      "})",
      "export default class App extends Vue {",
      "  columns = [",
      "    { type: 'selection', label: '全选' },",
      "    { type: 'index', label: '序号' },",
      "    { prop: 'name', label: '名称', configurable: true },",
      "    {",
      "      prop: 'phone',",
      "      label: '联系电话',",
      "      configurable: true,",
      "      render: (h, { row, column, $$index }) => {",
      "        return h('span', row.phone);",
      "      }",
      "    },",
      "    {",
      "      label: '操作',",
      "      width: 160,",
      "      render: (h, { row, column, $$index }) => {",
      "        const ops = [",
      "          h('span', { class: 'pointer color-primary', on: { click: () => {} } }, '查看'),",
      "          h('span', { class: 'pointer color-danger', on: { click: () => {} } }, '删除')",
      "        ];",
      "        return h('div', ops);",
      "      }",
      "    }",
      "  ];",
      "  searchForm = {",
      "    formProps: {},",
      "    formItemProps: {},",
      "    props: {",
      "      form: {},",
      "      row: {},",
      "      col: {},",
      "      formItem: {}",
      "    }",
      "  };",
      "  searchFormFormItems = [",
      "    {",
      "      prop: 'name',",
      "      label: '名称',",
      "      props: {},",
      "      fieldType: 'Input',",
      "      fieldProps: { placeholder: '请输入名称' },",
      "      colProps: { xs: 12, sm: 8, md: 8, lg: 6, xl: 6 },",
      "      render: (h, values, prop) => {",
      "        return h('elInput', {",
      "          props: { value: values[prop] },",
      "          attrs: { placehoder: '请输入...' },",
      "          on: {",
      "            input(value) {",
      "              values[prop] = value;",
      "            }",
      "          }",
      "        });",
      "      }",
      "    }",
      "  ];",
      "  searchFormInitValues = { name: '' };",
      "  searchFormRules = {};",
      "  tableProps = {};",
      "  tools = {",
      "    refresh: true,",
      "    columnsConfig: true,",
      "    menusTiledNumber: 2,",
      "    menus: [",
      "      {",
      "        label: '新增',",
      "        icon: 'el-icon-plus',",
      "        disabled: true,",
      "        clickHandler: (e, item, i) => {}",
      "      }",
      "    ],",
      "    dropdownMenu: {}",
      "  };",
      "  toolsTitle = 'toolsTilte';",
      "",
      "  slotAfterSearchRender() {",
      "    return 'slotAfterSearchRender';",
      "  }",
      "  slotBeforePaginationRender() {",
      "    return 'slotBeforePaginationRender';",
      "  }",
      "  slotBeforeSearchRender() {",
      "    return 'slotBeforeSearchRender';",
      "  }",
      "  slotBeforeTableRender() {",
      "    return 'slotBeforeTableRender';",
      "  }",
      "  slotBeforeToolsRender() {",
      "    return 'slotBeforeToolsRender';",
      "  }",
      "  slotTablePrefixRender() {",
      "    return 'slotTablePrefixRender';",
      "  }",
      "  slotTableSuffixRender() {",
      "    return 'slotTableSuffixRender';",
      "  }",
      "  slotPrefixRender() {",
      "    return 'slotPrefixRender';",
      "  }",
      "  slotSuffixRender() {",
      "    return 'slotSuffixRender';",
      "  }",
      "  toolsPreixRender() {",
      "    return 'toolsPreixRender';",
      "  }",
      "  toolsSuffixRender() {",
      "    return 'toolsSuffixRender';",
      "  }",
      "  onClickToolsMenu(item, i) {}",
      "  getList(values) {",
      "    return Promise.resolve({ok: false});",
      "  }",
      "",
      "  created() {}",
      "  mounted() {}",
      "}",
      "</script>",
      "",
      "<style lang=\"scss\" scoped>",
      "@include b(tablePageNewPage) {",
      "}",
      "</style>"
    ],
    "description": "TjTablePage"
  },
  "!TjTablepage simple": {
    "scope": "javascript,typescript,vue,vue-html,html,xml",
    "prefix": "!TjTablepage simple",
    "body": [
      "<template>",
      "  <div class=\"ins-tablePageNewPage\">",
      "    <TjTablePage",
      "      :columns=\"columns\"",
      "      :getList=\"getList\"",
      "      :searchFormFormItems=\"searchFormFormItems\"",
      "      :searchFormInitValues=\"searchFormInitValues\"",
      "      :tools=\"tools\"",
      "    />",
      "  </div>",
      "</template>",
      "",
      "<script lang=\"ts\">",
      "import { Component, Vue, Prop, Emit, Mixins, Watch, Inject, Provide, Ref } from 'vue-property-decorator';",
      "",
      "@Component({",
      "  name: ''",
      "})",
      "export default class App extends Vue {",
      "  columns = [",
      "    { type: 'selection', label: '全选' },",
      "    { type: 'index', label: '序号' },",
      "    { prop: 'name', label: '名称', configurable: true },",
      "    {",
      "      prop: 'phone',",
      "      label: '联系电话',",
      "      configurable: true,",
      "      render: (h, { row, column, $$index }) => {",
      "        return h('span', row.phone);",
      "      }",
      "    },",
      "    {",
      "      label: '操作',",
      "      width: 160,",
      "      render: (h, { row, column, $$index }) => {",
      "        const ops = [",
      "          h('span', { class: 'pointer color-primary', on: { click: () => {} } }, '查看'),",
      "          h('span', { class: 'pointer color-danger', on: { click: () => {} } }, '删除')",
      "        ];",
      "        return h('div', ops);",
      "      }",
      "    }",
      "  ];",
      "  searchFormFormItems = [",
      "    {",
      "      prop: 'name',",
      "      label: '名称',",
      "      props: {},",
      "      fieldType: 'Input',",
      "      fieldProps: { placeholder: '请输入名称' },",
      "      colProps: { xs: 12, sm: 8, md: 8, lg: 6, xl: 6 },",
      "      render: (h, values, prop) => {",
      "        return h('elInput', {",
      "          props: { value: values[prop] },",
      "          attrs: { placehoder: '请输入...' },",
      "          on: {",
      "            input(value) {",
      "              values[prop] = value;",
      "            }",
      "          }",
      "        });",
      "      }",
      "    }",
      "  ];",
      "  searchFormInitValues = { name: '' };",
      "  tools = {",
      "    refresh: true,",
      "    columnsConfig: true,",
      "    menusTiledNumber: 2,",
      "    menus: [",
      "      {",
      "        label: '新增',",
      "        icon: 'el-icon-plus',",
      "        disabled: true,",
      "        clickHandler: (e, item, i) => {}",
      "      }",
      "    ]",
      "  };",
      "  getList(values) {",
      "    return Promise.resolve({ok: false});",
      "  }",
      "",
      "  created() {}",
      "  mounted() {}",
      "}",
      "</script>",
      "",
      "<style lang=\"scss\" scoped>",
      "@include b(tablePageNewPage) {",
      "}",
      "</style>"
    ],
    "description": "TjTablePage simple"
  }
}
